name: Deploy Authentication Service

on:
  push:
    paths:
      - 'authentication_app/**'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
          rustc --version

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io
          sudo systemctl start docker
          sudo systemctl enable docker
          sudo usermod -aG docker $USER

      - name: Run PostgreSQL container
        run: |
          docker pull postgres:17.4
          docker run -d \
            --name authentication \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=phani \
            -e POSTGRES_DB=authentication \
            -p 5432:5432 \
            postgres:17.4
          sleep 10  # Give the DB time to initialize

      - name: Install sqlx-cli
        run: |
          source $HOME/.cargo/env
          cargo install sqlx-cli --no-default-features --features postgres

      - name: Run database migrations
        working-directory: ./authentication_app
        run: |
          source $HOME/.cargo/env
          sqlx migrate run --database-url postgres://postgres:phani@localhost:5432/authentication

      - name: Run Tests
        working-directory: ./authentication_app
        run: |
          source $HOME/.cargo/env
          cargo test --all

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          region: ${{ secrets.AWS_REGION }}

      - name: Build, tag, and push Docker image
        working-directory: ./authentication_app
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_AUTH_SERVICE }}
        run: |
          IMAGE_TAG=latest
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $(echo ${{ secrets.ECR_REPOSITORY_AUTH_SERVICE }} | cut -d'/' -f1)
            docker stop authentication-container || true
            docker rm authentication-container || true
            docker rmi ${{ secrets.ECR_REPOSITORY_AUTH_SERVICE }}:latest || true
            docker pull ${{ secrets.ECR_REPOSITORY_AUTH_SERVICE }}:latest
            docker run -d --restart unless-stopped --name authentication-container -p 9090:9090 ${{ secrets.ECR_REPOSITORY_AUTH_SERVICE }}:latest
