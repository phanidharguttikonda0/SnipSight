// This file is @generated by prost-build.
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Url {
    /// in response it returns original url in request it passes shorten Url
    #[prost(string, tag = "1")]
    pub url: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct User {
    #[prost(int32, tag = "1")]
    pub user_id: i32,
    #[prost(uint32, tag = "2")]
    pub page_number: u32,
    #[prost(uint32, tag = "3")]
    pub page_size: u32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UrlsList {
    /// it's become a Vec<Urls>
    #[prost(message, repeated, tag = "1")]
    pub list: ::prost::alloc::vec::Vec<Urls>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Urls {
    /// id of the row
    #[prost(int32, tag = "1")]
    pub id: i32,
    #[prost(string, tag = "2")]
    pub original_url: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub shorten_url: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub view_count: i32,
    /// here we need to change the type to timestamp
    #[prost(string, tag = "5")]
    pub created_at: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CustomName {
    #[prost(int32, tag = "1")]
    pub id: i32,
    #[prost(int32, tag = "2")]
    pub user_id: i32,
    /// the new custom name, before that we need to check whether the user was premium member or having credits at least
    #[prost(string, tag = "3")]
    pub custom_name: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdatedCustomName {
    /// if length was 0, then the below cause will not be zero length
    #[prost(string, tag = "1")]
    pub new_name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub cause: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UrlId {
    /// id of the url
    #[prost(int32, tag = "1")]
    pub id: i32,
    /// it helps to check whether the id belongs to the specific user-id or not
    #[prost(int32, tag = "2")]
    pub user_id: i32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SuccessMessage {
    /// it tells operations was successfull or not
    #[prost(bool, tag = "1")]
    pub operation: bool,
    /// if fails it tells the cause else mentions Success
    #[prost(string, tag = "2")]
    pub cause: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateShortenUrlPayload {
    /// represents it was the field number - 1
    #[prost(string, tag = "1")]
    pub original_url: ::prost::alloc::string::String,
    /// it may null as well
    #[prost(string, tag = "2")]
    pub custom_url: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub user_id: i32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Shorten {
    #[prost(string, tag = "1")]
    pub shorten_url: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub id: i32,
}
/// Generated client implementations.
pub mod url_shortner_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct UrlShortnerServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl UrlShortnerServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> UrlShortnerServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> UrlShortnerServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            UrlShortnerServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn create_shorten_url(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateShortenUrlPayload>,
        ) -> std::result::Result<tonic::Response<super::Shorten>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/url_shortner.UrlShortnerService/CreateShortenUrl",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "url_shortner.UrlShortnerService",
                        "CreateShortenUrl",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_shorten_url(
            &mut self,
            request: impl tonic::IntoRequest<super::UrlId>,
        ) -> std::result::Result<tonic::Response<super::SuccessMessage>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/url_shortner.UrlShortnerService/DeleteShortenUrl",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "url_shortner.UrlShortnerService",
                        "DeleteShortenUrl",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_shorten_url(
            &mut self,
            request: impl tonic::IntoRequest<super::CustomName>,
        ) -> std::result::Result<
            tonic::Response<super::UpdatedCustomName>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/url_shortner.UrlShortnerService/UpdateShortenUrl",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "url_shortner.UrlShortnerService",
                        "UpdateShortenUrl",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_shorten_urls_list(
            &mut self,
            request: impl tonic::IntoRequest<super::User>,
        ) -> std::result::Result<tonic::Response<super::UrlsList>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/url_shortner.UrlShortnerService/getShortenUrlsList",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "url_shortner.UrlShortnerService",
                        "getShortenUrlsList",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn increment_count(
            &mut self,
            request: impl tonic::IntoRequest<super::Url>,
        ) -> std::result::Result<tonic::Response<super::SuccessMessage>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/url_shortner.UrlShortnerService/incrementCount",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("url_shortner.UrlShortnerService", "incrementCount"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_original_url(
            &mut self,
            request: impl tonic::IntoRequest<super::Url>,
        ) -> std::result::Result<tonic::Response<super::Url>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/url_shortner.UrlShortnerService/getOriginalUrl",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("url_shortner.UrlShortnerService", "getOriginalUrl"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod url_shortner_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with UrlShortnerServiceServer.
    #[async_trait]
    pub trait UrlShortnerService: std::marker::Send + std::marker::Sync + 'static {
        async fn create_shorten_url(
            &self,
            request: tonic::Request<super::CreateShortenUrlPayload>,
        ) -> std::result::Result<tonic::Response<super::Shorten>, tonic::Status>;
        async fn delete_shorten_url(
            &self,
            request: tonic::Request<super::UrlId>,
        ) -> std::result::Result<tonic::Response<super::SuccessMessage>, tonic::Status>;
        async fn update_shorten_url(
            &self,
            request: tonic::Request<super::CustomName>,
        ) -> std::result::Result<
            tonic::Response<super::UpdatedCustomName>,
            tonic::Status,
        >;
        async fn get_shorten_urls_list(
            &self,
            request: tonic::Request<super::User>,
        ) -> std::result::Result<tonic::Response<super::UrlsList>, tonic::Status>;
        async fn increment_count(
            &self,
            request: tonic::Request<super::Url>,
        ) -> std::result::Result<tonic::Response<super::SuccessMessage>, tonic::Status>;
        async fn get_original_url(
            &self,
            request: tonic::Request<super::Url>,
        ) -> std::result::Result<tonic::Response<super::Url>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct UrlShortnerServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> UrlShortnerServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for UrlShortnerServiceServer<T>
    where
        T: UrlShortnerService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/url_shortner.UrlShortnerService/CreateShortenUrl" => {
                    #[allow(non_camel_case_types)]
                    struct CreateShortenUrlSvc<T: UrlShortnerService>(pub Arc<T>);
                    impl<
                        T: UrlShortnerService,
                    > tonic::server::UnaryService<super::CreateShortenUrlPayload>
                    for CreateShortenUrlSvc<T> {
                        type Response = super::Shorten;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateShortenUrlPayload>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as UrlShortnerService>::create_shorten_url(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateShortenUrlSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/url_shortner.UrlShortnerService/DeleteShortenUrl" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteShortenUrlSvc<T: UrlShortnerService>(pub Arc<T>);
                    impl<T: UrlShortnerService> tonic::server::UnaryService<super::UrlId>
                    for DeleteShortenUrlSvc<T> {
                        type Response = super::SuccessMessage;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UrlId>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as UrlShortnerService>::delete_shorten_url(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteShortenUrlSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/url_shortner.UrlShortnerService/UpdateShortenUrl" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateShortenUrlSvc<T: UrlShortnerService>(pub Arc<T>);
                    impl<
                        T: UrlShortnerService,
                    > tonic::server::UnaryService<super::CustomName>
                    for UpdateShortenUrlSvc<T> {
                        type Response = super::UpdatedCustomName;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CustomName>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as UrlShortnerService>::update_shorten_url(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateShortenUrlSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/url_shortner.UrlShortnerService/getShortenUrlsList" => {
                    #[allow(non_camel_case_types)]
                    struct getShortenUrlsListSvc<T: UrlShortnerService>(pub Arc<T>);
                    impl<T: UrlShortnerService> tonic::server::UnaryService<super::User>
                    for getShortenUrlsListSvc<T> {
                        type Response = super::UrlsList;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::User>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as UrlShortnerService>::get_shorten_urls_list(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = getShortenUrlsListSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/url_shortner.UrlShortnerService/incrementCount" => {
                    #[allow(non_camel_case_types)]
                    struct incrementCountSvc<T: UrlShortnerService>(pub Arc<T>);
                    impl<T: UrlShortnerService> tonic::server::UnaryService<super::Url>
                    for incrementCountSvc<T> {
                        type Response = super::SuccessMessage;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::Url>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as UrlShortnerService>::increment_count(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = incrementCountSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/url_shortner.UrlShortnerService/getOriginalUrl" => {
                    #[allow(non_camel_case_types)]
                    struct getOriginalUrlSvc<T: UrlShortnerService>(pub Arc<T>);
                    impl<T: UrlShortnerService> tonic::server::UnaryService<super::Url>
                    for getOriginalUrlSvc<T> {
                        type Response = super::Url;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::Url>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as UrlShortnerService>::get_original_url(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = getOriginalUrlSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for UrlShortnerServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "url_shortner.UrlShortnerService";
    impl<T> tonic::server::NamedService for UrlShortnerServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
